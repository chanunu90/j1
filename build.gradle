//쿼리 dsl 을 쓰기위한 라이브러리
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'

	implementation 'org.modelmapper:modelmapper:3.1.1'


	//쿼리 dsl 을 쓰기위한 라이브러리
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

    annotationProcessor(

            "jakarta.persistence:jakarta.persistence-api",

            "jakarta.annotation:jakarta.annotation-api",

            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

}

tasks.named('test') {
	useJUnitPlatform()
}
//쿼리 dsl 을 쓰기위한 라이브러리
sourceSets {
    main {
        java {
            srcDirs = [
				"$projectDir/src/main/java",
				"$projectDir/build/generated/sources/annotationProcessor/java/main"
			]
        }
    }
}

//컴파일만 하면 클린을 먼저 실행해주는코드인데 부트3버전만 된다 환장한다.
// compileJava.dependsOn('clean')
// compileTestJava.dependsOn('clean')